{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/MovieDB/MovieColumns.ts", "../../../Modules/MovieDB/Movie/GenreListFormatter.tsx", "../../../Modules/ServerTypes/MovieDB/MovieRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieService.ts", "../../../Modules/ServerTypes/MovieDB/MovieForm.ts"],
  "sourcesContent": ["\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { GenreListFormatter } from \"../../MovieDB/Movie/GenreListFormatter\";\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\nimport { MovieRow } from \"./MovieRow\";\n\nexport interface MovieColumns {\n    MovieId: Column<MovieRow>;\n    Title: Column<MovieRow>;\n    Description: Column<MovieRow>;\n    Storyline: Column<MovieRow>;\n    Year: Column<MovieRow>;\n    ReleaseDate: Column<MovieRow>;\n    Runtime: Column<MovieRow>;\n    Kind: Column<MovieRow>;\n    GenreList: Column<MovieRow>;\n}\n\nexport class MovieColumns extends ColumnsBase<MovieRow> {\n    static readonly columnsKey = 'MovieDB.Movie';\n    static readonly Fields = fieldsProxy<MovieColumns>();\n}\n\n[MovieKind, GenreListFormatter]; // referenced types", "import { Decorators, Formatter, Lookup } from \"@serenity-is/corelib\";\r\nimport { FormatterContext } from \"@serenity-is/sleekgrid\";\r\nimport { GenreRow } from \"../../ServerTypes/Modules\";\r\n\r\nlet lookup: Lookup<GenreRow>;\r\nlet promise: Promise<Lookup<GenreRow>>;\r\n\r\n@Decorators.registerFormatter('MovieTutorial.GenreListFormatter')\r\nexport class GenreListFormatter implements Formatter {\r\n\r\n    format(ctx: FormatterContext) {\r\n\r\n        let idList = ctx.value as number[];\r\n        if (!idList || !idList.length)\r\n            return \"\";\r\n\r\n        let byId = lookup?.itemById;\r\n        if (byId) {\r\n            return idList.map(id => {\r\n                var genre = byId[id];\r\n                return ctx.escape(genre == null ? id : genre.Name);\r\n            }).join(\", \");\r\n        }\r\n\r\n        promise ??= GenreRow.getLookupAsync().then(l => {\r\n            lookup = l;\r\n            try {\r\n                ctx.grid?.invalidate();\r\n            }\r\n            finally {\r\n                lookup = null;\r\n                promise = null;\r\n            }\r\n        }).catch(() => promise = null);\r\n\r\n        return <i class=\"fa fa-spinner\"></i>;\r\n    }\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\n\nexport interface MovieRow {\n    MovieId?: number;\n    Title?: string;\n    Description?: string;\n    Storyline?: string;\n    Year?: number;\n    ReleaseDate?: string;\n    Runtime?: number;\n    Kind?: MovieKind;\n    GenreList?: number[];\n}\n\nexport abstract class MovieRow {\n    static readonly idProperty = 'MovieId';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'MovieDB.Movie';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<MovieRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { MovieListRequest } from \"../Modules/MovieDB.Movie.MovieListRequest\";\nimport { MovieRow } from \"./MovieRow\";\n\nexport namespace MovieService {\n    export const baseUrl = 'MovieDB/Movie';\n\n    export declare function Create(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<MovieRow>>;\n    export declare function List(request: MovieListRequest, onSuccess?: (response: ListResponse<MovieRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<MovieRow>>;\n\n    export const Methods = {\n        Create: \"MovieDB/Movie/Create\",\n        Update: \"MovieDB/Movie/Update\",\n        Delete: \"MovieDB/Movie/Delete\",\n        Retrieve: \"MovieDB/Movie/Retrieve\",\n        List: \"MovieDB/Movie/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MovieService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, TextAreaEditor, Widget, IntegerEditor, DateEditor, EnumEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\n\nexport interface MovieForm {\n    Title: StringEditor;\n    Description: TextAreaEditor;\n    CastList: Widget;\n    Storyline: TextAreaEditor;\n    Year: IntegerEditor;\n    ReleaseDate: DateEditor;\n    Runtime: IntegerEditor;\n    Kind: EnumEditor;\n    GenreList: LookupEditor;\n}\n\nexport class MovieForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.Movie';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MovieForm.init)  {\n            MovieForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = TextAreaEditor;\n            var w2 = Widget;\n            var w3 = IntegerEditor;\n            var w4 = DateEditor;\n            var w5 = EnumEditor;\n            var w6 = LookupEditor;\n\n            initFormType(MovieForm, [\n                'Title', w0,\n                'Description', w1,\n                'CastList', w2,\n                'Storyline', w1,\n                'Year', w3,\n                'ReleaseDate', w4,\n                'Runtime', w3,\n                'Kind', w5,\n                'GenreList', w6\n            ]);\n        }\n    }\n}\n\n[MovieKind]; // referenced types"],
  "mappings": "2JAAC,IAAAA,EAAyC,SCA1C,IAAAC,EAA8C,SAI9C,IAAIC,EACAC,EALJC,EAAAC,EAOAD,EAAA,CAAC,aAAW,kBAAkB,kCAAkC,GACzD,IAAME,EAAN,MAAMA,CAAwC,CAEjD,OAAOC,EAAuB,CAE1B,IAAIC,EAASD,EAAI,MACjB,GAAI,CAACC,GAAU,CAACA,EAAO,OACnB,MAAO,GAEX,IAAIC,EAAOP,GAAA,YAAAA,EAAQ,SACnB,OAAIO,EACOD,EAAO,IAAIE,GAAM,CACpB,IAAIC,EAAQF,EAAKC,CAAE,EACnB,OAAOH,EAAI,OAAOI,GAAS,KAAOD,EAAKC,EAAM,IAAI,CACrD,CAAC,EAAE,KAAK,IAAI,GAGhBR,GAAA,OAAAA,EAAYS,EAAS,eAAe,EAAE,KAAKC,GAAK,CAxBxD,IAAAC,EAyBYZ,EAASW,EACT,GAAI,EACAC,EAAAP,EAAI,OAAJ,MAAAO,EAAU,YACd,QACA,CACIZ,EAAS,KACTC,EAAU,IACd,CACJ,CAAC,EAAE,MAAM,IAAMA,EAAU,IAAI,GAEtBY,EAAC,KAAE,MAAM,gBAAgB,EACpC,CACJ,EA7BOV,EAAAW,EAAA,MAAMV,EAANW,EAAAZ,EAAA,uBADPD,EACaE,GAAwCY,EAAAZ,EAAA,sBAA9Ca,EAAAd,EAAA,EAAMC,GAAN,IAAMc,EAANd,EDUA,IAAMe,EAAN,MAAMA,UAAqB,aAAsB,CAGxD,EAHwDC,EAAAD,EAAA,gBAA3CA,EACO,WAAa,gBADpBA,EAEO,UAAS,eAA0B,EAFhD,IAAME,EAANF,EElBN,IAAAG,EAA4B,SAetB,IAAeC,EAAf,MAAeA,CAAS,CAU/B,EAV+BC,EAAAD,EAAA,YAATA,EACF,WAAa,UADXA,EAEF,aAAe,QAFbA,EAGF,gBAAkB,gBAHhBA,EAIF,iBAAmB,yBAJjBA,EAKF,iBAAmB,yBALjBA,EAMF,eAAiB,yBANfA,EAOF,iBAAmB,yBAPjBA,EASF,UAAS,eAAsB,EAT5C,IAAeE,EAAfF,ECfN,IAAAG,EAA0J,SAI1IC,OACAA,EAAA,QAAU,gBAQVA,EAAA,QAAU,CACnB,OAAQ,uBACR,OAAQ,uBACR,OAAQ,uBACR,SAAU,yBACV,KAAM,oBACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAcC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACxC,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCJhB,IAAAK,EAAyI,SAenI,IAAMC,EAAN,MAAMA,UAAkB,iBAAgB,CAI3C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAU,KAAO,CAClBA,EAAU,KAAO,GAEjB,IAAIE,EAAK,eACLC,EAAK,iBACLC,EAAK,SACLC,EAAK,gBACLC,EAAK,aACLC,EAAK,aACLC,EAAK,kBAET,gBAAaR,EAAW,CACpB,QAASE,EACT,cAAeC,EACf,WAAYC,EACZ,YAAaD,EACb,OAAQE,EACR,cAAeC,EACf,UAAWD,EACX,OAAQE,EACR,YAAaC,CACjB,CAAC,CACL,CACJ,CACJ,EA/B+CC,EAAAT,EAAA,aAAlCA,EACO,QAAU,gBADvB,IAAMU,EAANV",
  "names": ["import_corelib", "import_corelib", "lookup", "promise", "_GenreListFormatter_decorators", "_init", "_GenreListFormatter", "ctx", "idList", "byId", "id", "genre", "GenreRow", "l", "_a", "jsx", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "GenreListFormatter", "_MovieColumns", "__name", "MovieColumns", "import_corelib", "_MovieRow", "__name", "MovieRow", "import_corelib", "MovieService", "x", "r", "s", "o", "import_corelib", "_MovieForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "__name", "MovieForm"]
}
