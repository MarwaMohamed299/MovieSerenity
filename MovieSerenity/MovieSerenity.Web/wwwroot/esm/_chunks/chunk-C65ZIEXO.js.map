{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/RemoteDataKeys.ts", "../../../Modules/Administration/UserPermission/PermissionCheckEditor.tsx"],
  "sourcesContent": ["\uFEFFexport namespace RemoteDataKeys {\r\n\r\n    export namespace Administration {\r\n        export const ImplicitPermissions = \"Administration.ImplicitPermissions\";\r\n        export const PermissionKeys = \"Administration.PermissionKeys\";\r\n    }\r\n    export const UserData = \"UserData\";\r\n}", "\uFEFFimport { RemoteDataKeys } from \"@/ServerTypes/RemoteDataKeys\";\r\nimport { Texts } from \"@/ServerTypes/Texts\";\r\nimport {\r\n    DataGrid, Decorators, Dictionary, Fluent, GridUtils, Grouping, IGetEditValue, ISetEditValue, SlickFormatting, SlickTreeHelper, ToolButton, WidgetProps, count, getRemoteDataAsync, stripDiacritics, toGrouping, tryGetText, turkishLocaleCompare\r\n} from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { UserPermissionRow } from \"../../ServerTypes/Administration\";\r\n\r\nexport interface PermissionCheckEditorOptions {\r\n    showRevoke?: boolean;\r\n    value?: (UserPermissionRow | string)[];\r\n    rolePermissions?: string[];\r\n    implicitPermissions?: Record<string, string[]>;\r\n}\r\n\r\nexport interface PermissionCheckItem {\r\n    ParentKey?: string;\r\n    Key?: string;\r\n    Title?: string;\r\n    IsGroup?: boolean;\r\n    GrantRevoke?: boolean;\r\n}\r\n\r\n@Decorators.registerEditor('MovieSerenity.Administration.PermissionCheckEditor', [IGetEditValue, ISetEditValue])\r\nexport class PermissionCheckEditor<P extends PermissionCheckEditorOptions = PermissionCheckEditorOptions> extends DataGrid<PermissionCheckItem, P> {\r\n\r\n    protected getIdProperty() { return \"Key\"; }\r\n\r\n    declare private searchText: string;\r\n    declare private byParentKey: Grouping<PermissionCheckItem>;\r\n\r\n    constructor(props: WidgetProps<P>) {\r\n        super(props);\r\n\r\n        let titleByKey: Dictionary<string> = {};\r\n        this.getSortedGroupAndPermissionKeys(titleByKey, (permissionKeys) => {\r\n            if (!this.domNode)\r\n                return;\r\n\r\n            let items = permissionKeys.map(key => ({\r\n                Key: key,\r\n                ParentKey: this.getParentKey(key),\r\n                Title: titleByKey[key],\r\n                GrantRevoke: null,\r\n                IsGroup: key.charAt(key.length - 1) === ':'\r\n            } satisfies PermissionCheckItem));\r\n\r\n            this.byParentKey = toGrouping(items, x => x.ParentKey);\r\n            this.setItems(items);\r\n            this.value = this._value;\r\n        });\r\n\r\n        if (this.options.value) {\r\n            if (typeof this.options.value[0] === \"string\")\r\n                this.valueAsStrings = this.options.value as string[];\r\n            else\r\n                this.value = this.options.value as UserPermissionRow[];\r\n        }\r\n\r\n        this.implicitPermissions = props.implicitPermissions;\r\n        this.rolePermissions = props.rolePermissions;\r\n    }\r\n\r\n    private getItemGrantRevokeClass(item: PermissionCheckItem, grant: boolean): string {\r\n        if (!item.IsGroup)\r\n            return ((item.GrantRevoke === grant) ? ' checked' : '');\r\n\r\n        const desc = this.getDescendants(item, true);\r\n        const granted = desc.filter(x => x.GrantRevoke === grant);\r\n        return !granted.length ? '' : ((desc.length === granted.length) ? 'checked' : 'partial');\r\n    }\r\n\r\n    private hasByRoleOrImplicitly(permission: string): boolean {\r\n        return this.rolePermSet.has(permission) || Object.entries(this.implicitSets).some(([ifperm, permset]) =>\r\n            permset.has(permission) && (this.rolePermSet.has(ifperm) || this.view.getItemById(ifperm)?.GrantRevoke));\r\n    }\r\n\r\n    private getItemEffectiveClass(item: PermissionCheckItem): string {\r\n        if (item.IsGroup) {\r\n            const desc = this.getDescendants(item, true);\r\n            const grantCount = count(desc, x => x.GrantRevoke === true || (x.GrantRevoke == null && this.hasByRoleOrImplicitly(x.Key)));\r\n            return (grantCount === desc.length || desc.length === 0) ? 'allow' : (grantCount === 0 ? 'deny' : 'partial');\r\n        }\r\n\r\n        return (item.GrantRevoke === true || (item.GrantRevoke == null && this.hasByRoleOrImplicitly(item.Key))) ? 'allow' : 'deny';\r\n    }\r\n\r\n    protected getColumns(): Column[] {\r\n        let columns: Column[] = [{\r\n            name: Texts.Site.UserPermissionDialog.Permission,\r\n            field: 'Title',\r\n            format: SlickFormatting.treeToggle(() => this.view, x => x.Key, ctx => <span class={[\"effective-permission\", this.getItemEffectiveClass(ctx.item)]}>{ctx.value}</span>),\r\n            width: 495,\r\n            sortable: false\r\n        }, {\r\n            name: Texts.Site.UserPermissionDialog.Grant,\r\n            field: 'Grant',\r\n            format: ctx => <span class={[\"check-box grant no-float \", this.getItemGrantRevokeClass(ctx.item, true)]} />,\r\n            width: 65,\r\n            sortable: false,\r\n            headerCssClass: 'align-center',\r\n            cssClass: 'align-center'\r\n        }];\r\n\r\n        if (this.options.showRevoke) {\r\n            columns.push({\r\n                name: Texts.Site.UserPermissionDialog.Revoke,\r\n                field: 'Revoke',\r\n                format: ctx => <span class={[\"check-box revoke no-float\", this.getItemGrantRevokeClass(ctx.item, false)]} />,\r\n                width: 65,\r\n                sortable: false,\r\n                headerCssClass: 'align-center',\r\n                cssClass: 'align-center'\r\n            });\r\n        }\r\n\r\n        return columns;\r\n    }\r\n\r\n    public setItems(items: PermissionCheckItem[]): void {\r\n        SlickTreeHelper.setIndents(items, x => x.Key, x => x.ParentKey, false);\r\n        this.view.setItems(items, true);\r\n    }\r\n\r\n    protected onViewSubmit() {\r\n        return false;\r\n    }\r\n\r\n    protected onViewFilter(item: PermissionCheckItem): boolean {\r\n        return super.onViewFilter(item) && SlickTreeHelper.filterById(item, this.view, x => x.ParentKey) &&\r\n            (!this.searchText || (this.matchContains(item) || item.IsGroup && this.getDescendants(item, false).some(x => this.matchContains(x))));\r\n    }\r\n\r\n    private matchContains(item: PermissionCheckItem): boolean {\r\n        return stripDiacritics(item.Title || '').toLowerCase().indexOf(this.searchText) >= 0;\r\n    }\r\n\r\n    private getDescendants(item: PermissionCheckItem, excludeGroups: boolean): PermissionCheckItem[] {\r\n        const result: PermissionCheckItem[] = [];\r\n        const stack = [item];\r\n        while (stack.length > 0) {\r\n            let i = stack.pop();\r\n            let children = this.byParentKey[i.Key];\r\n            if (!children)\r\n                continue;\r\n\r\n            for (let child of children) {\r\n                if (!excludeGroups || !child.IsGroup) {\r\n                    result.push(child);\r\n                }\r\n\r\n                stack.push(child);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected onClick(e: Event, row: number, cell: number): void {\r\n        super.onClick(e, row, cell);\r\n\r\n        if (!Fluent.isDefaultPrevented(e))\r\n            SlickTreeHelper.toggleClick(e, row, cell, this.view, (x: any) => x.Key);\r\n\r\n        if (Fluent.isDefaultPrevented(e))\r\n            return;\r\n\r\n        const target = Fluent(e.target);\r\n        let grant = target.hasClass('grant');\r\n\r\n        if (grant || target.hasClass('revoke')) {\r\n            e.preventDefault();\r\n\r\n            let item = this.itemAt(row);\r\n            let checkedOrPartial = target.hasClass('checked') || target.hasClass('partial');\r\n            grant = checkedOrPartial ? null : grant !== checkedOrPartial;\r\n\r\n            if (item.IsGroup)\r\n                this.getDescendants(item, true).forEach(x => x.GrantRevoke = grant);\r\n            else\r\n                item.GrantRevoke = grant;\r\n\r\n            this.slickGrid.invalidate();\r\n        }\r\n    }\r\n\r\n    private getParentKey(key: string): string {\r\n        if (key.charAt(key.length - 1) === ':')\r\n            key = key.substring(0, key.length - 1);\r\n\r\n        const idx = key.lastIndexOf(':');\r\n        return idx >= 0 ? key.substring(0, idx + 1) : null;\r\n    }\r\n\r\n    protected getButtons(): ToolButton[] {\r\n        return [];\r\n    }\r\n\r\n    protected createToolbarExtensions(): void {\r\n        super.createToolbarExtensions();\r\n        GridUtils.addQuickSearchInputCustom(this.toolbar.domNode, (_, text) => {\r\n            this.searchText = stripDiacritics(text?.trim() ?? '').toLowerCase();\r\n            this.view.setItems(this.view.getItems(), true);\r\n        });\r\n    }\r\n\r\n    private getSortedGroupAndPermissionKeys(titleByKey: Dictionary<string>, then: (result: string[]) => void) {\r\n        getRemoteDataAsync(RemoteDataKeys.Administration.PermissionKeys).then((keys: string[]) => {\r\n            let titleWithGroup = {};\r\n            for (var s of keys.filter(s => s)) {\r\n                if (s.charAt(s.length - 1) == ':') {\r\n                    s = s.substring(0, s.length - 1);\r\n                    if (s.length === 0) {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                if (titleByKey[s]) {\r\n                    continue;\r\n                }\r\n\r\n                titleByKey[s] = tryGetText('Permission.' + s) ?? s;\r\n                let parts = s.split(':');\r\n                let group = '';\r\n                let groupTitle = '';\r\n                for (let i = 0; i < parts.length - 1; i++) {\r\n                    group = group + parts[i] + ':';\r\n                    let txt = tryGetText('Permission.' + group);\r\n                    if (txt == null) {\r\n                        txt = parts[i];\r\n                    }\r\n                    titleByKey[group] = txt;\r\n                    groupTitle = groupTitle + titleByKey[group] + ':';\r\n                    titleWithGroup[group] = groupTitle;\r\n                }\r\n\r\n                titleWithGroup[s] = groupTitle + titleByKey[s];\r\n            }\r\n\r\n            keys = Object.keys(titleByKey);\r\n            keys = keys.sort((x, y) => turkishLocaleCompare(titleWithGroup[x], titleWithGroup[y]));\r\n            then(keys);\r\n        });\r\n    }\r\n\r\n    declare private _value: UserPermissionRow[];\r\n\r\n    get value(): UserPermissionRow[] {\r\n        if (!this.view.getItems().length) // not initialized yet\r\n            return (this._value || []).map(x => ({ PermissionKey: x.PermissionKey, Granted: x.Granted }));\r\n\r\n        return this.view.getItems().filter(item => item.GrantRevoke != null && item.Key.charAt(item.Key.length - 1) != ':')\r\n            .map(item => ({ PermissionKey: item.Key, Granted: item.GrantRevoke }));\r\n    }\r\n\r\n    set value(value: UserPermissionRow[]) {\r\n        this._value = (value || []);\r\n        this.view.getItems().forEach(x => { x.GrantRevoke = null });\r\n        for (let item of this._value) {\r\n            const r = this.view.getItemById(item.PermissionKey);\r\n            r && (r.GrantRevoke = item.Granted ?? true);\r\n        }\r\n        this.setItems(this.getItems());\r\n    }\r\n\r\n    get valueAsStrings() {\r\n        return this.value.map(x => x.PermissionKey);\r\n    }\r\n\r\n    set valueAsStrings(value: string[]) {\r\n        this.value = (value || []).map(x => ({ PermissionKey: x }));\r\n    }\r\n\r\n    private rolePermSet: Set<string> = new Set();\r\n\r\n    get rolePermissions(): string[] {\r\n        return Array.from(this.rolePermSet.values());\r\n    }\r\n\r\n    set rolePermissions(value: string[]) {\r\n        this.rolePermSet = new Set();\r\n        value?.forEach(x => this.rolePermSet.add(x));\r\n    }\r\n\r\n    private implicitSets: Record<string, Set<string>> = {};\r\n\r\n    set implicitPermissions(value: Record<string, string[]>) {\r\n        this.implicitSets = {};\r\n        Object.entries(value || {}).forEach(([ifperm, permarr]) =>\r\n            permarr?.forEach(perm => (this.implicitSets[ifperm] ||= new Set()).add(perm)));\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["RemoteDataKeys", "Administration", "import_corelib", "_PermissionCheckEditor_decorators", "_init", "_a", "_PermissionCheckEditor", "props", "titleByKey", "permissionKeys", "items", "key", "x", "item", "grant", "desc", "granted", "permission", "ifperm", "permset", "grantCount", "columns", "Texts", "ctx", "jsx", "__name", "excludeGroups", "result", "stack", "i", "children", "child", "row", "cell", "target", "checkedOrPartial", "idx", "_", "text", "then", "RemoteDataKeys", "keys", "titleWithGroup", "s", "parts", "group", "groupTitle", "txt", "y", "value", "r", "permarr", "perm", "__decoratorStart", "__decorateElement", "__runInitializers", "PermissionCheckEditor"]
}
