{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Modules/Administration.Genre.Genre.GenreColumns.ts", "../../../Modules/ServerTypes/Modules/Administration.Genre.Genre.GenreRow.ts", "../../../Modules/ServerTypes/Modules/Administration.Genre.Genre.GenreService.ts", "../../../Modules/ServerTypes/Modules/Administration.Genre.Genre.GenreForm.ts", "../../../Modules/ServerTypes/Modules/MovieDB.Movie.MovieKind.ts", "../../../Modules/Administration/Genre/GenreDialog.tsx"],
  "sourcesContent": ["\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { GenreRow } from \"./Administration.Genre.Genre.GenreRow\";\n\nexport interface GenreColumns {\n    GenreId: Column<GenreRow>;\n    Name: Column<GenreRow>;\n}\n\nexport class GenreColumns extends ColumnsBase<GenreRow> {\n    static readonly columnsKey = 'Adminstration.Genre';\n    static readonly Fields = fieldsProxy<GenreColumns>();\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface GenreRow {\n    GenreId?: number;\n    Name?: string;\n}\n\nexport abstract class GenreRow {\n    static readonly idProperty = 'GenreId';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'Adminstration.Genre';\n    static readonly lookupKey = 'MovieDB.Genre';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<GenreRow>('MovieDB.Genre') }\n    static async getLookupAsync() { return getLookupAsync<GenreRow>('MovieDB.Genre') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<GenreRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { GenreRow } from \"./Administration.Genre.Genre.GenreRow\";\n\nexport namespace GenreService {\n    export const baseUrl = 'Adminstraion/Genre';\n\n    export declare function Create(request: SaveRequest<GenreRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<GenreRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<GenreRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<GenreRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<GenreRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<GenreRow>>;\n\n    export const Methods = {\n        Create: \"Adminstraion/Genre/Create\",\n        Update: \"Adminstraion/Genre/Update\",\n        Delete: \"Adminstraion/Genre/Delete\",\n        Retrieve: \"Adminstraion/Genre/Retrieve\",\n        List: \"Adminstraion/Genre/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>GenreService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface GenreForm {\n    Name: StringEditor;\n}\n\nexport class GenreForm extends PrefixedContext {\n    static readonly formKey = 'Adminstration.Genre';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!GenreForm.init)  {\n            GenreForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(GenreForm, [\n                'Name', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum MovieKind {\n    Film = 1,\n    TvSeries = 2,\n    MiniSeries = 3\n}\nDecorators.registerEnumType(MovieKind, 'MovieSerenity.Modules.MovieDB.Movie.MovieKind', 'MovieDB.MovieKind');", "import { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { GenreForm, GenreRow, GenreService } from '../../ServerTypes/Modules';\r\n\r\n@Decorators.registerClass('MovieSerenity.Adminstration.GenreDialog')\nexport class GenreDialog extends EntityDialog<GenreRow, any> {\n    protected getFormKey() { return GenreForm.formKey; }\n    protected getRowDefinition() { return GenreRow; }\n    protected getService() { return GenreService.baseUrl; }\n\n    protected form = new GenreForm(this.idPrefix);\n}"],
  "mappings": "2EAAC,IAAAA,EAAyC,SASnC,IAAMC,EAAN,MAAMA,UAAqB,aAAsB,CAGxD,EAHwDC,EAAAD,EAAA,gBAA3CA,EACO,WAAa,sBADpBA,EAEO,UAAS,eAA0B,EAFhD,IAAME,EAANF,ECTN,IAAAG,EAAuD,SAOjD,IAAeC,EAAf,MAAeA,CAAS,CAO3B,OAAO,WAAY,CAAE,SAAO,aAAoB,eAAe,CAAE,CACjE,aAAa,gBAAiB,CAAE,SAAO,kBAAyB,eAAe,CAAE,CAQrF,EAhB+BC,EAAAD,EAAA,YAATA,EACF,WAAa,UADXA,EAEF,aAAe,OAFbA,EAGF,gBAAkB,sBAHhBA,EAIF,UAAY,gBAJVA,EAUF,iBAAmB,yBAVjBA,EAWF,iBAAmB,yBAXjBA,EAYF,eAAiB,yBAZfA,EAaF,iBAAmB,yBAbjBA,EAeF,UAAS,eAAsB,EAf5C,IAAeE,EAAfF,ECPN,IAAAG,EAAuK,SAGvJC,OACAA,EAAA,QAAU,qBAQVA,EAAA,QAAU,CACnB,OAAQ,4BACR,OAAQ,4BACR,OAAQ,4BACR,SAAU,8BACV,KAAM,yBACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAcC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACxC,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCHhB,IAAAK,EAA4D,SAMtD,IAAMC,EAAN,MAAMA,UAAkB,iBAAgB,CAI3C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAU,KAAO,CAClBA,EAAU,KAAO,GAEjB,IAAIE,EAAK,kBAET,gBAAaF,EAAW,CACpB,OAAQE,CACZ,CAAC,CACL,CACJ,CACJ,EAjB+CC,EAAAH,EAAA,aAAlCA,EACO,QAAU,sBADvB,IAAMI,EAANJ,ECNN,IAAAK,EAA2B,SAEhBC,OACRA,IAAA,KAAO,GAAP,OACAA,IAAA,SAAW,GAAX,WACAA,IAAA,WAAa,GAAb,aAHQA,OAAA,IAKZ,aAAW,iBAAiBA,EAAW,gDAAiD,mBAAmB,ECP3G,IAAAC,EAAyC,SAAzC,IAAAC,EAAAC,EAAAC,EAGAF,EAAA,CAAC,aAAW,cAAc,yCAAyC,GAC5D,IAAMG,EAAN,MAAMA,UAAoBD,EAAA,eAA4B,CAAtD,kCAKH,KAAU,KAAO,IAAIE,EAAU,KAAK,QAAQ,EAJlC,YAAa,CAAE,OAAOA,EAAU,OAAS,CACzC,kBAAmB,CAAE,OAAOC,CAAU,CACtC,YAAa,CAAE,OAAOC,EAAa,OAAS,CAG1D,EANOL,EAAAM,EAAAL,GAAMC,EAANK,EAAAP,EAAA,gBADPD,EACaG,GAAgDM,EAAAN,EAAA,eAAtDO,EAAAT,EAAA,EAAME,GAAN,IAAMQ,EAANR",
  "names": ["import_corelib", "_GenreColumns", "__name", "GenreColumns", "import_corelib", "_GenreRow", "__name", "GenreRow", "import_corelib", "GenreService", "x", "r", "s", "o", "import_corelib", "_GenreForm", "prefix", "w0", "__name", "GenreForm", "import_corelib", "MovieKind", "import_corelib", "_GenreDialog_decorators", "_init", "_a", "_GenreDialog", "GenreForm", "GenreRow", "GenreService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "GenreDialog"]
}
