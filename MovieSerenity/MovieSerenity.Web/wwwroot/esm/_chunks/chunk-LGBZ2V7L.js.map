{
  "version": 3,
  "sources": ["external-global:Serenity.Extensions", "../../../Modules/MovieDB/MovieCast/MovieCastEditor.tsx", "../../../Modules/ServerTypes/MovieDB/MovieCastColumns.ts", "../../../Modules/ServerTypes/MovieDB/MovieCastForm.ts", "../../../Modules/ServerTypes/MovieDB/MovieCastRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieCastService.ts", "../../../Modules/ServerTypes/MovieDB/MovieColumns.ts", "../../../Modules/MovieDB/Movie/GenreListFormatter.tsx", "../../../Modules/ServerTypes/MovieDB/MovieForm.ts", "../../../Modules/ServerTypes/MovieDB/MovieGenresRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieGenresService.ts", "../../../Modules/ServerTypes/MovieDB/MovieRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieService.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "import { Decorators} from '@serenity-is/corelib';\r\nimport {  MovieCastForm, MovieCastRow } from '../../ServerTypes/MovieDB';\r\nimport {  GridEditorDialog } from '@serenity-is/extensions';\r\n\r\n@Decorators.registerEditor('MovieSerenity.MovieDB.MovieCastEditor')\r\nexport class MovieCastEditDialog extends GridEditorDialog<MovieCastRow> {\r\n    protected getFormKey() { return MovieCastForm.formKey; }\r\n    protected getNameProperty() { return MovieCastRow.nameProperty; }\r\n    protected getLocalTextPrefix() { return MovieCastRow.localTextPrefix; }\r\n\r\n    protected form: MovieCastForm = new MovieCastForm(this.idPrefix);\r\n    protected getDialogType() { return MovieCastEditDialog; }\r\n\r\n    protected getAddButtonCaption() {\r\n        return \"Add\";\r\n    }\r\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { MovieCastRow } from \"./MovieCastRow\";\r\n\r\nexport interface MovieCastColumns {\r\n    PersonFullName: Column<MovieCastRow>;\r\n    Character: Column<MovieCastRow>;\r\n}\r\n\r\nexport class MovieCastColumns extends ColumnsBase<MovieCastRow> {\r\n    static readonly columnsKey = 'MovieDB.MovieCast';\r\n    static readonly Fields = fieldsProxy<MovieCastColumns>();\r\n}", "\uFEFFimport { LookupEditor, StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\n\r\nexport interface MovieCastForm {\r\n    PersonId: LookupEditor;\r\n    Character: StringEditor;\r\n}\r\n\r\nexport class MovieCastForm extends PrefixedContext {\r\n    static readonly formKey = 'MovieDB.MovieCast';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!MovieCastForm.init)  {\r\n            MovieCastForm.init = true;\r\n\r\n            var w0 = LookupEditor;\r\n            var w1 = StringEditor;\r\n\r\n            initFormType(MovieCastForm, [\r\n                'PersonId', w0,\r\n                'Character', w1\r\n            ]);\r\n        }\r\n    }\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\n\r\nexport interface MovieCastRow {\r\n    MovieCastId?: number;\r\n    MovieId?: number;\r\n    PersonId?: number;\r\n    Character?: string;\r\n    MovieTitle?: string;\r\n    PersonFullName?: string;\r\n}\r\n\r\nexport abstract class MovieCastRow {\r\n    static readonly idProperty = 'MovieCastId';\r\n    static readonly nameProperty = 'Character';\r\n    static readonly localTextPrefix = 'MovieDB.MovieCast';\r\n    static readonly deletePermission = 'Adminstration:General';\r\n    static readonly insertPermission = 'Adminstration:General';\r\n    static readonly readPermission = 'Adminstration:General';\r\n    static readonly updatePermission = 'Adminstration:General';\r\n\r\n    static readonly Fields = fieldsProxy<MovieCastRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\r\nimport { MovieCastRow } from \"./MovieCastRow\";\r\n\r\nexport namespace MovieCastService {\r\n    export const baseUrl = 'MovieDB/MovieCast';\r\n\r\n    export declare function Create(request: SaveRequest<MovieCastRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Update(request: SaveRequest<MovieCastRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieCastRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<MovieCastRow>>;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieCastRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<MovieCastRow>>;\r\n\r\n    export const Methods = {\r\n        Create: \"MovieDB/MovieCast/Create\",\r\n        Update: \"MovieDB/MovieCast/Update\",\r\n        Delete: \"MovieDB/MovieCast/Delete\",\r\n        Retrieve: \"MovieDB/MovieCast/Retrieve\",\r\n        List: \"MovieDB/MovieCast/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>MovieCastService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { GenreListFormatter } from \"../../MovieDB/Movie/GenreListFormatter\";\r\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\r\nimport { MovieRow } from \"./MovieRow\";\r\n\r\nexport interface MovieColumns {\r\n    MovieId: Column<MovieRow>;\r\n    Title: Column<MovieRow>;\r\n    Description: Column<MovieRow>;\r\n    Storyline: Column<MovieRow>;\r\n    Year: Column<MovieRow>;\r\n    ReleaseDate: Column<MovieRow>;\r\n    Runtime: Column<MovieRow>;\r\n    Kind: Column<MovieRow>;\r\n    GenreList: Column<MovieRow>;\r\n}\r\n\r\nexport class MovieColumns extends ColumnsBase<MovieRow> {\r\n    static readonly columnsKey = 'MovieDB.Movie';\r\n    static readonly Fields = fieldsProxy<MovieColumns>();\r\n}\r\n\r\n[MovieKind, GenreListFormatter]; // referenced types", "import { Decorators, Formatter, Lookup } from \"@serenity-is/corelib\";\r\nimport { FormatterContext } from \"@serenity-is/sleekgrid\";\r\nimport { GenreRow } from \"../../ServerTypes/Modules\";\r\n\r\nlet lookup: Lookup<GenreRow>;\r\nlet promise: Promise<Lookup<GenreRow>>;\r\n\r\n@Decorators.registerFormatter('MovieTutorial.GenreListFormatter')\r\nexport class GenreListFormatter implements Formatter {\r\n\r\n    format(ctx: FormatterContext) {\r\n\r\n        let idList = ctx.value as number[];\r\n        if (!idList || !idList.length)\r\n            return \"\";\r\n\r\n        let byId = lookup?.itemById;\r\n        if (byId) {\r\n            return idList.map(id => {\r\n                var genre = byId[id];\r\n                return ctx.escape(genre == null ? id : genre.Name);\r\n            }).join(\", \");\r\n        }\r\n\r\n        promise ??= GenreRow.getLookupAsync().then(l => {\r\n            lookup = l;\r\n            try {\r\n                ctx.grid?.invalidate();\r\n            }\r\n            finally {\r\n                lookup = null;\r\n                promise = null;\r\n            }\r\n        }).catch(() => promise = null);\r\n\r\n        return <i class=\"fa fa-spinner\"></i>;\r\n    }\r\n}", "\uFEFFimport { StringEditor, TextAreaEditor, IntegerEditor, DateEditor, EnumEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\nimport { MovieCastEditDialog } from \"../../MovieDB/MovieCast/MovieCastEditor\";\r\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\r\n\r\nexport interface MovieForm {\r\n    Title: StringEditor;\r\n    Description: TextAreaEditor;\r\n    CastList: MovieCastEditDialog;\r\n    Storyline: TextAreaEditor;\r\n    Year: IntegerEditor;\r\n    ReleaseDate: DateEditor;\r\n    Runtime: IntegerEditor;\r\n    Kind: EnumEditor;\r\n    GenreList: LookupEditor;\r\n}\r\n\r\nexport class MovieForm extends PrefixedContext {\r\n    static readonly formKey = 'MovieDB.Movie';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!MovieForm.init)  {\r\n            MovieForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n            var w1 = TextAreaEditor;\r\n            var w2 = MovieCastEditDialog;\r\n            var w3 = IntegerEditor;\r\n            var w4 = DateEditor;\r\n            var w5 = EnumEditor;\r\n            var w6 = LookupEditor;\r\n\r\n            initFormType(MovieForm, [\r\n                'Title', w0,\r\n                'Description', w1,\r\n                'CastList', w2,\r\n                'Storyline', w1,\r\n                'Year', w3,\r\n                'ReleaseDate', w4,\r\n                'Runtime', w3,\r\n                'Kind', w5,\r\n                'GenreList', w6\r\n            ]);\r\n        }\r\n    }\r\n}\r\n\r\n[MovieKind]; // referenced types", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\n\r\nexport interface MovieGenresRow {\r\n    MovieGenreId?: number;\r\n    MovieId?: number;\r\n    GenreId?: number;\r\n    MovieTitle?: string;\r\n    GenreName?: string;\r\n}\r\n\r\nexport abstract class MovieGenresRow {\r\n    static readonly idProperty = 'MovieGenreId';\r\n    static readonly localTextPrefix = 'MovieDB.MovieGenres';\r\n    static readonly deletePermission = 'Adminstration:General';\r\n    static readonly insertPermission = 'Adminstration:General';\r\n    static readonly readPermission = 'Adminstration:General';\r\n    static readonly updatePermission = 'Adminstration:General';\r\n\r\n    static readonly Fields = fieldsProxy<MovieGenresRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\r\nimport { MovieGenresRow } from \"./MovieGenresRow\";\r\n\r\nexport namespace MovieGenresService {\r\n    export const baseUrl = 'MovieDB/MovieGenres';\r\n\r\n    export declare function Create(request: SaveRequest<MovieGenresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Update(request: SaveRequest<MovieGenresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieGenresRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<MovieGenresRow>>;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieGenresRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<MovieGenresRow>>;\r\n\r\n    export const Methods = {\r\n        Create: \"MovieDB/MovieGenres/Create\",\r\n        Update: \"MovieDB/MovieGenres/Update\",\r\n        Delete: \"MovieDB/MovieGenres/Delete\",\r\n        Retrieve: \"MovieDB/MovieGenres/Retrieve\",\r\n        List: \"MovieDB/MovieGenres/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>MovieGenresService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\r\n\r\nexport interface MovieRow {\r\n    MovieId?: number;\r\n    Title?: string;\r\n    Description?: string;\r\n    Storyline?: string;\r\n    Year?: number;\r\n    ReleaseDate?: string;\r\n    Runtime?: number;\r\n    Kind?: MovieKind;\r\n    GenreList?: number[];\r\n}\r\n\r\nexport abstract class MovieRow {\r\n    static readonly idProperty = 'MovieId';\r\n    static readonly nameProperty = 'Title';\r\n    static readonly localTextPrefix = 'MovieDB.Movie';\r\n    static readonly deletePermission = 'Administration:General';\r\n    static readonly insertPermission = 'Administration:General';\r\n    static readonly readPermission = 'Administration:General';\r\n    static readonly updatePermission = 'Administration:General';\r\n\r\n    static readonly Fields = fieldsProxy<MovieRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\r\nimport { MovieListRequest } from \"../Modules/MovieDB.Movie.MovieListRequest\";\r\nimport { MovieRow } from \"./MovieRow\";\r\n\r\nexport namespace MovieService {\r\n    export const baseUrl = 'MovieDB/Movie';\r\n\r\n    export declare function Create(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Update(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<MovieRow>>;\r\n    export declare function List(request: MovieListRequest, onSuccess?: (response: ListResponse<MovieRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<MovieRow>>;\r\n\r\n    export const Methods = {\r\n        Create: \"MovieDB/Movie/Create\",\r\n        Update: \"MovieDB/Movie/Update\",\r\n        Delete: \"MovieDB/Movie/Delete\",\r\n        Retrieve: \"MovieDB/Movie/Retrieve\",\r\n        List: \"MovieDB/Movie/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>MovieService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}"],
  "mappings": "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",
  "names": ["require_Serenity", "__commonJSMin", "exports", "module", "import_corelib", "import_corelib", "_MovieCastColumns", "__name", "MovieCastColumns", "import_corelib", "_MovieCastForm", "prefix", "w0", "w1", "__name", "MovieCastForm", "import_corelib", "_MovieCastRow", "__name", "MovieCastRow", "import_corelib", "MovieCastService", "x", "r", "s", "o", "import_corelib", "import_corelib", "lookup", "promise", "_GenreListFormatter_decorators", "_init", "_GenreListFormatter", "ctx", "idList", "byId", "id", "genre", "GenreRow", "l", "_a", "jsx", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "GenreListFormatter", "_MovieColumns", "__name", "MovieColumns", "import_corelib", "_MovieForm", "prefix", "w0", "w1", "w2", "MovieCastEditDialog", "w3", "w4", "w5", "w6", "__name", "MovieForm", "import_corelib", "_MovieGenresRow", "__name", "MovieGenresRow", "import_corelib", "MovieGenresService", "x", "r", "s", "o", "import_corelib", "_MovieRow", "__name", "MovieRow", "import_corelib", "MovieService", "x", "r", "s", "o", "import_extensions", "_MovieCastEditDialog_decorators", "_init", "_a", "_MovieCastEditDialog", "MovieCastForm", "MovieCastRow", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "MovieCastEditDialog"]
}
