{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/User/UserPage.ts", "../../../../../Modules/Administration/User/UserGrid.ts", "../../../../../Modules/Administration/User/UserDialog.ts", "../../../../../Modules/Administration/UserPermission/UserPermissionDialog.tsx"],
  "sourcesContent": ["import { gridPageInit } from \"@serenity-is/corelib\"\r\nimport { UserGrid } from \"./UserGrid\";\r\n\r\nexport default () => gridPageInit(UserGrid);", "import { RoleRow, UserColumns, UserRow, UserService } from \"@/ServerTypes/Administration\";\r\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\r\nimport { Lookup, resolveUrl, tryFirst } from \"@serenity-is/corelib\";\r\nimport { UserDialog } from \"./UserDialog\";\r\n\r\n@Decorators.registerClass()\r\nexport class UserGrid extends EntityGrid<UserRow, any> {\r\n    protected getColumnsKey() { return UserColumns.columnsKey; }\r\n    protected getDialogType() { return UserDialog; }\r\n    protected getIdProperty() { return UserRow.idProperty; }\r\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\r\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\r\n    protected getService() { return UserService.baseUrl; }\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    protected override getDefaultSortBy() {\r\n        return [UserRow.Fields.Username];\r\n    }\r\n\r\n    protected override createIncludeDeletedButton() {\r\n    }\r\n\r\n    protected override getColumns() {\r\n        var columns = super.getColumns();\r\n\r\n        var roles = tryFirst(columns, x => x.field == UserRow.Fields.Roles);\r\n        if (roles) {\r\n            var rolesLookup: Lookup<RoleRow>;\r\n            RoleRow.getLookupAsync().then(lookup => {\r\n                rolesLookup = lookup;\r\n                this.slickGrid.invalidate();\r\n            });\r\n\r\n            roles.format = ctx => {\r\n                if (!rolesLookup)\r\n                    return `<i class=\"fa fa-spinner\"></i>`;\r\n\r\n                var roleList = (ctx.value || []).map(x => (rolesLookup.itemById[x] || {}).RoleName || \"\");\r\n                roleList.sort();\r\n                return roleList.join(\", \");\r\n            };\r\n        }\r\n\r\n        return columns;\r\n    }\r\n}\r\n", "import { UserForm, UserRow, UserService } from \"@/ServerTypes/Administration\";\r\nimport { Texts } from \"@/ServerTypes/Texts\";\r\nimport { Decorators, EditorUtils, EntityDialog, localText, stringFormat } from \"@serenity-is/corelib\";\r\nimport { UserPermissionDialog } from \"../UserPermission/UserPermissionDialog\";\r\n\r\n@Decorators.registerClass()\r\nexport class UserDialog extends EntityDialog<UserRow, any> {\r\n    protected getFormKey() { return UserForm.formKey; }\r\n    protected getIdProperty() { return UserRow.idProperty; }\r\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\r\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\r\n    protected getNameProperty() { return UserRow.nameProperty; }\r\n    protected getService() { return UserService.baseUrl; }\r\n\r\n    protected form = new UserForm(this.idPrefix);\r\n\r\n    constructor(props?: any) {\r\n        super(props);\r\n\r\n        this.form.Password.change(() => {\r\n            EditorUtils.setRequired(this.form.PasswordConfirm, this.form.Password.value.length > 0);\r\n        });\r\n\r\n        this.form.Password.addValidationRule(this.uniqueName, e => {\r\n            if (this.form.Password.value.length < 6)\r\n                return stringFormat(localText(Texts.Validation.MinRequiredPasswordLength), 6);\r\n        });\r\n\r\n        this.form.PasswordConfirm.addValidationRule(this.uniqueName, e => {\r\n            if (this.form.Password.value != this.form.PasswordConfirm.value)\r\n                return localText(Texts.Validation.PasswordConfirmMismatch);\r\n        });\r\n    }\r\n\r\n    protected getToolbarButtons()\r\n    {\r\n        let buttons = super.getToolbarButtons();\r\n\r\n        buttons.push({\r\n            title: localText(Texts.Site.UserDialog.EditPermissionsButton),\r\n            cssClass: 'edit-permissions-button',\r\n            icon: 'fa-lock text-green',\r\n            onClick: () =>\r\n            {\r\n                new UserPermissionDialog({\r\n                    userID: this.entity.UserId,\r\n                    username: this.entity.Username\r\n                }).dialogOpen();\r\n            }\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected updateInterface() {\r\n        super.updateInterface();\r\n\r\n        this.toolbar.findButton(\"edit-permissions-button\").toggleClass(\"disabled\", this.isNewOrDeleted());\r\n    }\r\n\r\n    protected afterLoadEntity() {\r\n        super.afterLoadEntity();\r\n\r\n        // these fields are only required in new record mode\r\n        this.form.Password.element.toggleClass('required', this.isNew())\r\n            .closest('.field').findFirst('sup').toggle(this.isNew());\r\n        this.form.PasswordConfirm.element.toggleClass('required', this.isNew())\r\n            .closest('.field').findFirst('sup').toggle(this.isNew());\r\n    }\r\n}\r\n", "import { getRemoteData, localText, notifySuccess, stringFormat, BaseDialog } from \"@serenity-is/corelib\";\r\nimport { UserPermissionService } from \"../../ServerTypes/Administration/UserPermissionService\";\r\nimport { PermissionCheckEditor } from \"./PermissionCheckEditor\";\r\nimport { RemoteDataKeys } from \"../../ServerTypes/RemoteDataKeys\";\r\n\r\nexport class UserPermissionDialog extends BaseDialog<UserPermissionDialogOptions> {\r\n\r\n    private permissions: PermissionCheckEditor;\r\n\r\n    constructor(opt: UserPermissionDialogOptions) {\r\n        super(opt);\r\n\r\n        this.permissions = new PermissionCheckEditor({ element: this.byId('Permissions'), ... {\r\n            showRevoke: true\r\n        }});\r\n\r\n        UserPermissionService.List({\r\n            UserID: this.options.userID\r\n        }, response => {\r\n            this.permissions.value = response.Entities;\r\n        });\r\n\r\n        UserPermissionService.ListRolePermissions({\r\n            UserID: this.options.userID\r\n        }, response => {\r\n            this.permissions.rolePermissions = response.Entities;\r\n        });\r\n\r\n        this.permissions.implicitPermissions = getRemoteData(RemoteDataKeys.Administration.ImplicitPermissions);\r\n        this.dialogTitle = stringFormat(localText('Site.UserPermissionDialog.DialogTitle'),\r\n            this.options.username);\r\n    }\r\n\r\n    protected getDialogButtons() {\r\n        return [\r\n            {\r\n                text: localText('Dialogs.OkButton'),\r\n                cssClass: 'btn btn-primary',\r\n                click: e => {\r\n                    UserPermissionService.Update({\r\n                        UserID: this.options.userID,\r\n                        Permissions: this.permissions.value\r\n                    }, () => {\r\n                        this.dialogClose();\r\n                        window.setTimeout(() => notifySuccess(localText('Site.UserPermissionDialog.SaveSuccess')), 0);\r\n                    });\r\n                }\r\n            }, {\r\n                text: localText('Dialogs.CancelButton'),\r\n                click: () => this.dialogClose()\r\n            }\r\n        ];\r\n    }\r\n\r\n    protected renderContents(): any {\r\n        const id = this.useIdPrefix();\r\n        return <div id={id.Permissions} />;\r\n    }\r\n}\r\n\r\nexport interface UserPermissionDialogOptions {\r\n    userID?: number;\r\n    username?: string;\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "import_corelib", "import_corelib", "_UserPermissionDialog", "opt", "PermissionCheckEditor", "UserPermissionService", "response", "RemoteDataKeys", "__name", "e", "id", "jsx", "UserPermissionDialog", "_UserDialog_decorators", "_init", "_a", "_UserDialog", "props", "UserForm", "e", "Texts", "UserRow", "UserService", "buttons", "__name", "UserPermissionDialog", "__decoratorStart", "__decorateElement", "__runInitializers", "UserDialog", "_UserGrid_decorators", "_init", "_a", "_UserGrid", "UserColumns", "UserDialog", "UserRow", "UserService", "props", "columns", "roles", "x", "rolesLookup", "RoleRow", "lookup", "ctx", "roleList", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "UserGrid", "UserPage_default", "__name", "UserGrid"]
}
