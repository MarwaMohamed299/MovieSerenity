{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/Role/RolePage.ts", "../../../../../Modules/Administration/Role/RoleDialog.ts", "../../../../../Modules/Administration/RolePermission/RolePermissionDialog.ts", "../../../../../Modules/Administration/Role/RoleGrid.ts"],
  "sourcesContent": ["import { gridPageInit } from \"@serenity-is/corelib\";\r\nimport { RoleGrid } from \"./RoleGrid\";\r\n\r\nexport default () => gridPageInit(RoleGrid);", "\uFEFFimport { RoleForm, RoleRow, RoleService } from \"@/ServerTypes/Administration\";\r\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\r\nimport { Texts } from \"../../ServerTypes/Texts\";\r\nimport { RolePermissionDialog } from \"../RolePermission/RolePermissionDialog\";\r\n\r\nconst editPermissions = \"edit-permissions\";\r\n\r\n@Decorators.registerClass('MovieSerenity.Administration.RoleDialog')\r\nexport class RoleDialog extends EntityDialog<RoleRow, any> {\r\n    protected getFormKey() { return RoleForm.formKey; }\r\n    protected getIdProperty() { return RoleRow.idProperty; }\r\n    protected getLocalTextPrefix() { return RoleRow.localTextPrefix; }\r\n    protected getNameProperty() { return RoleRow.nameProperty; }\r\n    protected getService() { return RoleService.baseUrl; }\r\n\r\n    protected form = new RoleForm(this.idPrefix);\r\n\r\n    protected getToolbarButtons() {\r\n        let buttons = super.getToolbarButtons();\r\n\r\n        buttons.push({\r\n            title: Texts.Site.RolePermissionDialog.EditButton,\r\n            cssClass: editPermissions,\r\n            icon: 'fa-lock text-green',\r\n            onClick: () => {\r\n                new RolePermissionDialog({\r\n                    roleID: this.entity.RoleId,\r\n                    title: this.entity.RoleName\r\n                }).dialogOpen();\r\n            }\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n\r\n    protected updateInterface() {\r\n        super.updateInterface();\r\n\r\n        this.toolbar.findButton(editPermissions).toggleClass(\"disabled\", this.isNewOrDeleted());\r\n    }\r\n}", "import { BaseDialog, stringFormat, getRemoteData, localText, notifySuccess } from \"@serenity-is/corelib\";\r\nimport { PermissionCheckEditor } from \"../UserPermission/PermissionCheckEditor\";\r\nimport { RolePermissionService, UserPermissionRow } from \"@/ServerTypes/Administration\";\r\nimport { RemoteDataKeys } from \"../../ServerTypes/RemoteDataKeys\";\r\n\r\nexport class RolePermissionDialog extends BaseDialog<RolePermissionDialogOptions> {\r\n\r\n    private permissions: PermissionCheckEditor;\r\n\r\n    constructor(opt: RolePermissionDialogOptions) {\r\n        super(opt);\r\n\r\n        this.permissions = new PermissionCheckEditor({ element: this.byId('Permissions'), ... {\r\n            showRevoke: false\r\n        }});\r\n\r\n        RolePermissionService.List({\r\n            RoleID: this.options.roleID\r\n        }, response => {\r\n            this.permissions.value = response.Entities.map(x => (<UserPermissionRow>{ PermissionKey: x }));\r\n        });\r\n\r\n        this.permissions.implicitPermissions = getRemoteData(RemoteDataKeys.Administration.ImplicitPermissions);\r\n    }\r\n\r\n    protected getDialogOptions()  {\r\n        let opt = super.getDialogOptions();\r\n\r\n        opt.buttons = [\r\n            {\r\n                text: localText('Dialogs.OkButton'),\r\n                click: e => {\r\n                    RolePermissionService.Update({\r\n                        RoleID: this.options.roleID,\r\n                        Permissions: this.permissions.value.map(x => x.PermissionKey)\r\n                    }, response => {\r\n                        this.dialogClose();\r\n                        window.setTimeout(() => notifySuccess(localText('Site.RolePermissionDialog.SaveSuccess')), 0);\r\n                    });\r\n                }\r\n            }, {\r\n                text: localText('Dialogs.CancelButton'),\r\n                click: () => this.dialogClose()\r\n            }];\r\n\r\n        opt.title = stringFormat(localText('Site.RolePermissionDialog.DialogTitle'),\r\n            this.options.title);\r\n\r\n        return opt;\r\n    }\r\n\r\n    protected getTemplate(): string {\r\n        return '<div id=\"~_Permissions\"></div>';\r\n    }\r\n}\r\n\r\nexport interface RolePermissionDialogOptions {\r\n    roleID?: number;\r\n    title?: string;\r\n}", "\uFEFFimport { RoleRow, RoleColumns, RoleService } from \"@/ServerTypes/Administration\";\r\nimport { RoleDialog } from \"./RoleDialog\";\r\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\r\n\r\n@Decorators.registerClass('MovieSerenity.Administration.RoleGrid')\r\nexport class RoleGrid extends EntityGrid<RoleRow, any> {\r\n    protected getColumnsKey() { return RoleColumns.columnsKey; }\r\n    protected getDialogType() { return RoleDialog; }\r\n    protected getIdProperty() { return RoleRow.idProperty; }\r\n    protected getLocalTextPrefix() { return RoleRow.localTextPrefix; }\r\n    protected getService() { return RoleService.baseUrl; }\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    protected getDefaultSortBy() {\r\n        return [RoleRow.Fields.RoleName];\r\n    }\r\n}"],
  "mappings": "wXAAA,IAAAA,EAA6B,SCC7B,IAAAC,EAAyC,SCDzC,IAAAC,EAAkF,SAK3E,IAAMC,EAAN,MAAMA,UAA6B,YAAwC,CAI9E,YAAYC,EAAkC,CAC1C,MAAMA,CAAG,EAET,KAAK,YAAc,IAAIC,EAAsB,CAAE,QAAS,KAAK,KAAK,aAAa,EAC3E,WAAY,EACf,CAAC,EAEFC,EAAsB,KAAK,CACvB,OAAQ,KAAK,QAAQ,MACzB,EAAGC,GAAY,CACX,KAAK,YAAY,MAAQA,EAAS,SAAS,IAAIC,IAAyB,CAAE,cAAeA,CAAE,EAAE,CACjG,CAAC,EAED,KAAK,YAAY,uBAAsB,iBAAcC,EAAe,eAAe,mBAAmB,CAC1G,CAEU,kBAAoB,CAC1B,IAAIL,EAAM,MAAM,iBAAiB,EAEjC,OAAAA,EAAI,QAAU,CACV,CACI,QAAM,aAAU,kBAAkB,EAClC,MAAOM,EAAAC,GAAK,CACRL,EAAsB,OAAO,CACzB,OAAQ,KAAK,QAAQ,OACrB,YAAa,KAAK,YAAY,MAAM,IAAIE,GAAKA,EAAE,aAAa,CAChE,EAAGD,GAAY,CACX,KAAK,YAAY,EACjB,OAAO,WAAW,OAAM,oBAAc,aAAU,uCAAuC,CAAC,EAAG,CAAC,CAChG,CAAC,CACL,EARO,QASX,EAAG,CACC,QAAM,aAAU,sBAAsB,EACtC,MAAOG,EAAA,IAAM,KAAK,YAAY,EAAvB,QACX,CAAC,EAELN,EAAI,SAAQ,mBAAa,aAAU,uCAAuC,EACtE,KAAK,QAAQ,KAAK,EAEfA,CACX,CAEU,aAAsB,CAC5B,MAAO,gCACX,CACJ,EAjDkFM,EAAAP,EAAA,wBAA3E,IAAMS,EAANT,EDAP,IAAMU,EAAkB,mBALxBC,EAAAC,EAAAC,EAOAF,EAAA,CAAC,aAAW,cAAc,yCAAyC,GAC5D,IAAMG,EAAN,MAAMA,UAAmBD,EAAA,eAA2B,CAApD,kCAOH,KAAU,KAAO,IAAIE,EAAS,KAAK,QAAQ,EANjC,YAAa,CAAE,OAAOA,EAAS,OAAS,CACxC,eAAgB,CAAE,OAAOC,EAAQ,UAAY,CAC7C,oBAAqB,CAAE,OAAOA,EAAQ,eAAiB,CACvD,iBAAkB,CAAE,OAAOA,EAAQ,YAAc,CACjD,YAAa,CAAE,OAAOC,EAAY,OAAS,CAI3C,mBAAoB,CAC1B,IAAIC,EAAU,MAAM,kBAAkB,EAEtC,OAAAA,EAAQ,KAAK,CACT,MAAOC,EAAM,KAAK,qBAAqB,WACvC,SAAUT,EACV,KAAM,qBACN,QAASU,EAAA,IAAM,CACX,IAAIC,EAAqB,CACrB,OAAQ,KAAK,OAAO,OACpB,MAAO,KAAK,OAAO,QACvB,CAAC,EAAE,WAAW,CAClB,EALS,UAMb,CAAC,EAEMH,CACX,CAEU,iBAAkB,CACxB,MAAM,gBAAgB,EAEtB,KAAK,QAAQ,WAAWR,CAAe,EAAE,YAAY,WAAY,KAAK,eAAe,CAAC,CAC1F,CACJ,EAhCOE,EAAAU,EAAAT,GAAMC,EAANS,EAAAX,EAAA,eADPD,EACaG,GAA8CM,EAAAN,EAAA,cAApDU,EAAAZ,EAAA,EAAME,GAAN,IAAMW,EAANX,EENP,IAAAY,EAAuC,SAFvC,IAAAC,EAAAC,EAAAC,EAIAF,EAAA,CAAC,aAAW,cAAc,uCAAuC,GAC1D,IAAMG,EAAN,MAAMA,UAAiBD,EAAA,aAAyB,CACzC,eAAgB,CAAE,OAAOE,EAAY,UAAY,CACjD,eAAgB,CAAE,OAAOC,CAAY,CACrC,eAAgB,CAAE,OAAOC,EAAQ,UAAY,CAC7C,oBAAqB,CAAE,OAAOA,EAAQ,eAAiB,CACvD,YAAa,CAAE,OAAOC,EAAY,OAAS,CAErD,YAAYC,EAAY,CACpB,MAAMA,CAAK,CACf,CAEU,kBAAmB,CACzB,MAAO,CAACF,EAAQ,OAAO,QAAQ,CACnC,CACJ,EAdOL,EAAAQ,EAAAP,GAAMC,EAANO,EAAAT,EAAA,aADPD,EACaG,GAA0CQ,EAAAR,EAAA,YAAhDS,EAAAX,EAAA,EAAME,GAAN,IAAMU,EAANV,EHFP,IAAOW,EAAQC,EAAA,OAAM,gBAAaC,CAAQ,EAA3B",
  "names": ["import_corelib", "import_corelib", "import_corelib", "_RolePermissionDialog", "opt", "PermissionCheckEditor", "RolePermissionService", "response", "x", "RemoteDataKeys", "__name", "e", "RolePermissionDialog", "editPermissions", "_RoleDialog_decorators", "_init", "_a", "_RoleDialog", "RoleForm", "RoleRow", "RoleService", "buttons", "Texts", "__name", "RolePermissionDialog", "__decoratorStart", "__decorateElement", "__runInitializers", "RoleDialog", "import_corelib", "_RoleGrid_decorators", "_init", "_a", "_RoleGrid", "RoleColumns", "RoleDialog", "RoleRow", "RoleService", "props", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "RoleGrid", "RolePage_default", "__name", "RoleGrid"]
}
